name: PyInstaller Build

on:
  push:
    branches:
      - main 
  pull_request:
    branches:
      - main
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: pn532_cli_release_linux
          - os: windows-latest
            artifact_name: pn532_cli_release_windows
          - os: macos-latest
            artifact_name: pn532_cli_release_macos

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r script/requirements.txt
        pip install pyinstaller

    - name: Run PyInstaller
      run: |
        pyinstaller script/pyinstaller.spec

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/

  create-release:
    runs-on: ubuntu-latest
    needs: build  # Ensure create-release depends on build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts (Linux)
        uses: actions/download-artifact@v3
        with:
          name: pn532_cli_release_linux

      - name: Download build artifacts (Windows)
        uses: actions/download-artifact@v3
        with:
          name: pn532_cli_release_windows

      - name: Download build artifacts (macOS)
        uses: actions/download-artifact@v3
        with:
          name: pn532_cli_release_macos

      - name: Get latest tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $TAG"
          echo "::set-output name=tag::${TAG}"

      - name: Increment tag
        id: increment_tag
        run: |
          CURRENT_TAG="${{ steps.get_tag.outputs.tag }}"
          echo "Current tag: $CURRENT_TAG"
          VERSION_NUMBER=$(echo $CURRENT_TAG | sed -E 's/v([0-9]+)\.([0-9]+)\.([0-9]+)/\1 \2 \3/')
          IFS=" " read -r major minor patch <<< "$VERSION_NUMBER"
          patch=$((patch+1))
          NEW_TAG="v$major.$minor.$patch"
          echo "New tag: $NEW_TAG"
          echo "::set-output name=new_tag::$NEW_TAG"

      - name: Create Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.increment_tag.outputs.new_tag }}
          release_name: Release ${{ steps.increment_tag.outputs.new_tag }}
          draft: false
          prerelease: false

      - name: Upload Linux assets to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/*linux*  # Ensure this matches the files in dist/ for Linux

      - name: Upload Windows assets to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/*windows*  # Ensure this matches the files in dist/ for Windows

      - name: Upload macOS assets to release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/*macos*  # Ensure this matches the files in dist/ for macOS
